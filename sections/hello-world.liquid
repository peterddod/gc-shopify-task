<!-- sections/product-slider.liquid -->
<div class="product-slider-section" data-section-id="{{ section.id }}">
  <div class="container">
    {% if section.settings.heading != blank %}
      <h2 class="section-heading">{{ section.settings.heading }}</h2>
    {% endif %}
    
    <div class="product-slider-wrapper">
      <div class="product-slider" id="product-slider-{{ section.id }}">
        <!-- Products will be loaded here via JavaScript -->
        <div class="loading-spinner">Loading products...</div>
      </div>
      
      <!-- Navigation buttons -->
      <button class="slider-btn slider-btn--prev" id="prev-{{ section.id }}">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      
      <button class="slider-btn slider-btn--next" id="next-{{ section.id }}">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>

    <!-- Dots indicator -->
    <div class="slider-dots" id="dots-{{ section.id }}"></div>
  </div>
</div>

<style>
  .product-slider-section {
    padding: {{ section.settings.padding_top }}px 0 {{ section.settings.padding_bottom }}px;
    background-color: {{ section.settings.background_color }};
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .section-heading {
    text-align: left;
    font-size: {{ section.settings.heading_size }}px;
    color: {{ section.settings.heading_color }};
    font-family: {{ section.settings.heading_font.family }};
    margin-bottom: 20px;
  }

  .product-slider-wrapper {
    position: relative;
    overflow: hidden;
  }

  .product-slider {
    display: flex;
    transition: transform 0.3s ease;
    gap: 20px;
  }

  .product-card {
    flex: 0 0 calc(25% - 15px);
    overflow: hidden;
    transition: transform 0.2s ease;
  }

  .product-card:hover {
    transform: translateY(-5px);
  }

  .product-image {
    width: 100%;
    height: 250px;
    object-fit: scale-down;
    background-color: #f0f0f0;
  }

  .product-info {
    padding-top: 15px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 150px;
  }

  .product-info-container {
    display: flex;
    flex-direction: column;
    gap: 3px;
  }

  .product-title {
    font-size: 14px;
    margin-bottom: 8px;
    color: #333;
    text-decoration: none;
    align-self: flex-start !important;
  }

  .product-title:hover {
    color: {{ section.settings.accent_color }};
  }

  .product-price {
    font-size: 18px;
    font-weight: 700;
  }

  .offer {
    color: white;
    font-size: 10px;
    font-weight: 700;
    background-color: {{ section.settings.offer_color }};
    padding: 2px 4px;
    border-radius: 3px;
    width: fit-content;
  }

  .product-price .compare-price {
    text-decoration: line-through;
    color: #999;
    font-weight: 400;
    margin-left: 8px;
  }

  .product-author {
    font-size: 12px;
    letter-spacing: -0.02em;
    color: #888888;
  }

  .add-to-cart-btn {
    width: 100%;
    padding: 7px;
    font-size: 12px;
    background-color: {{ section.settings.button_color }};
    color: {{ section.settings.button_text_color }};
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 800;
    transition: background-color 0.2s ease;
  }

  .slider-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: white;
    border: none;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    z-index: 2;
    transition: all 0.2s ease;
  }

  .slider-btn--prev {
    left: 10px;
  }

  .slider-btn--next {
    right: 10px;
  }

  .slider-dots {
    display: flex;
    justify-content: center;
    margin-top: 30px;
    gap: 8px;
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: #ddd;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .dot.active {
    background-color: {{ section.settings.accent_color }};
  }

  .loading-spinner {
    text-align: center;
    padding: 50px;
    color: #999;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .product-card {
      flex: 0 0 calc(50% - 10px);
    }
    
    .slider-btn {
      display: block;
    }
  }

  @media (max-width: 480px) {
    .product-card {
      flex: 0 0 calc(100% - 0px);
    }
  }
</style>

<script>
class ProductSlider {
  constructor(sectionId, settings) {
    this.sectionId = sectionId;
    this.settings = settings;
    this.slider = document.getElementById(`product-slider-${sectionId}`);
    this.prevBtn = document.getElementById(`prev-${sectionId}`);
    this.nextBtn = document.getElementById(`next-${sectionId}`);
    this.dotsContainer = document.getElementById(`dots-${sectionId}`);
    
    this.currentSlide = 0;
    this.products = [];
    this.itemsPerSlide = this.getItemsPerSlide();
    
    this.init();
  }

  async init() {
    await this.fetchProducts();
    this.renderProducts();
    this.setupNavigation();
    this.setupDots();
    this.setupResponsive();
  }

  getItemsPerSlide() {
    if (window.innerWidth <= 480) return 1;
    if (window.innerWidth <= 768) return 2;
    return 4;
  }

  async fetchProducts() {
    const query = `
      query getProducts($first: Int!, $sortKey: ProductSortKeys, $reverse: Boolean) {
        products(first: $first, sortKey: $sortKey, reverse: $reverse) {
          edges {
            node {
              id
              title
              handle
              images(first: 1) {
                edges {
                  node {
                    url
                    altText
                  }
                }
              }
              priceRange {
                minVariantPrice {
                  amount
                  currencyCode
                }
              }
              compareAtPriceRange {
                minVariantPrice {
                  amount
                  currencyCode
                }
              }
              variants(first: 1) {
                edges {
                  node {
                    id
                    availableForSale
                  }
                }
              }
              metafield(namespace: "custom", key: "author") {
                value
              }
            }
          }
        }
      }
    `;

    const variables = {
      first: parseInt(this.settings.product_count),
      sortKey: this.settings.sort_order.toUpperCase(),
      reverse: this.settings.sort_order === 'CREATED_AT' ? true : false
    };

    try {
      const response = await fetch(`${window.Shopify.routes.root}api/2023-10/graphql.json`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Storefront-Access-Token': '{{ settings.storefront_access_token }}'
        },
        body: JSON.stringify({ query, variables })
      });

      const data = await response.json();
      // Add after the fetch call:
      this.products = data.data.products.edges.map(edge => edge.node);
    } catch (error) {
      console.error('Error fetching products:', error);
      this.slider.innerHTML = '<p>Error loading products</p>';
    }
  }

  renderProducts() {
    if (this.products.length === 0) {
      this.slider.innerHTML = '<p>No products found</p>';
      return;
    }

    const productsHtml = this.products.map(product => {
      const image = product.images.edges[0]?.node;
      const price = product.priceRange.minVariantPrice;
      const comparePrice = product.compareAtPriceRange.minVariantPrice;
      const variant = product.variants.edges[0]?.node;

      return `
        <div class="product-card">
          <a href="/products/${product.handle}">
            <img 
              src="${image?.url || '/assets/placeholder.svg'}" 
              alt="${image?.altText || product.title}"
              class="product-image"
              loading="lazy"
            />
          </a>
          <div class="product-info">
            <a href="/products/${product.handle}" class="product-title">
              ${product.title}
            </a>
            <div class="product-info-container">
              <div class="product-author">
                ${product.metafield?.value || ''}
              </div>
              <div class="product-price">
                ${this.formatPrice(price)}
                ${comparePrice && comparePrice.amount > price.amount ? 
                  `<span class="compare-price">${this.formatPrice(comparePrice)}</span>` : ''
                }
              </div>
              {% if section.settings.offer_text != blank %}
              <div class="offer">
                {{ section.settings.offer_text }}
              </div>
              {% endif %}
              <button 
                class="add-to-cart-btn" 
                data-variant-id="${variant?.id}"
                ${!variant?.availableForSale ? 'disabled' : ''}
                >
                ${variant?.availableForSale ? 'Add to Cart' : 'Sold Out'}
              </button>
            </div>
            
          </div>
        </div>
      `;
    }).join('');

    this.slider.innerHTML = productsHtml;

    // Setup add to cart functionality
    this.slider.querySelectorAll('.add-to-cart-btn').forEach(btn => {
      btn.addEventListener('click', (e) => this.addToCart(e));
    });
  }

  formatPrice(price) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: price.currencyCode
    }).format(price.amount);
  }

  async addToCart(e) {
    const btn = e.target;
    const variantId = btn.dataset.variantId;
    
    if (!variantId) return;

    btn.textContent = 'Adding...';
    btn.disabled = true;

    try {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId.replace('gid://shopify/ProductVariant/', ''),
          quantity: 1
        })
      });

      if (response.ok) {
        btn.textContent = 'Added!';
        setTimeout(() => {
          btn.textContent = 'Add to Cart';
          btn.disabled = false;
        }, 2000);
        
        // Update cart count if you have one
        document.dispatchEvent(new CustomEvent('cart:updated'));
      } else {
        throw new Error('Failed to add to cart');
      }
    } catch (error) {
      console.error('Error adding to cart:', error);
      btn.textContent = 'Error';
      setTimeout(() => {
        btn.textContent = 'Add to Cart';
        btn.disabled = false;
      }, 2000);
    }
  }

  setupNavigation() {
    this.prevBtn.addEventListener('click', () => this.previousSlide());
    this.nextBtn.addEventListener('click', () => this.nextSlide());
  }

  setupDots() {
    const totalSlides = Math.ceil(this.products.length / this.itemsPerSlide);
    
    for (let i = 0; i < totalSlides; i++) {
      const dot = document.createElement('div');
      dot.className = `dot ${i === 0 ? 'active' : ''}`;
      dot.addEventListener('click', () => this.goToSlide(i));
      this.dotsContainer.appendChild(dot);
    }
  }

  previousSlide() {
    const totalSlides = Math.ceil(this.products.length / this.itemsPerSlide);
    this.currentSlide = this.currentSlide > 0 ? this.currentSlide - 1 : totalSlides - 1;
    this.updateSlider();
  }

  nextSlide() {
    const totalSlides = Math.ceil(this.products.length / this.itemsPerSlide);
    this.currentSlide = this.currentSlide < totalSlides - 1 ? this.currentSlide + 1 : 0;
    this.updateSlider();
  }

  goToSlide(slideIndex) {
    this.currentSlide = slideIndex;
    this.updateSlider();
  }

  updateSlider() {
    const translateX = -(this.currentSlide * 100);
    this.slider.style.transform = `translateX(${translateX}%)`;
    
    // Update dots
    this.dotsContainer.querySelectorAll('.dot').forEach((dot, index) => {
      dot.classList.toggle('active', index === this.currentSlide);
    });
  }

  setupResponsive() {
    window.addEventListener('resize', () => {
      const newItemsPerSlide = this.getItemsPerSlide();
      if (newItemsPerSlide !== this.itemsPerSlide) {
        this.itemsPerSlide = newItemsPerSlide;
        this.currentSlide = 0;
        this.dotsContainer.innerHTML = '';
        this.setupDots();
        this.updateSlider();
      }
    });
  }
}

// Initialize slider when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  const sectionId = '{{ section.id }}';
  const settings = {
    product_count: {{ section.settings.product_count }},
    sort_order: '{{ section.settings.sort_order }}',
    collection_handle: '{{ section.settings.collection_handle }}'
  };
  
  new ProductSlider(sectionId, settings);
});
</script>

{% schema %}
{
  "name": "Product Slider",
  "tag": "section",
  "class": "product-slider-section",
  "settings": [
    {
      "type": "header",
      "content": "Content Settings"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Bestselling Fiction Books"
    },
    {
      "type": "text",
      "id": "offer_text",
      "label": "Offer text",
      "default": "Buy 3 Get Another 3 Free"
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading font",
      "default": "merriweather_n4"
    },
    {
      "type": "range",
      "id": "product_count",
      "label": "Number of products to show",
      "min": 4,
      "max": 20,
      "step": 1,
      "default": 8
    },
    {
      "type": "select",
      "id": "sort_order",
      "label": "Sort products by",
      "options": [
        {
          "value": "created_at",
          "label": "Newest first"
        },
        {
          "value": "best_selling",
          "label": "Best selling"
        },
        {
          "value": "title",
          "label": "Alphabetically"
        },
        {
          "value": "price",
          "label": "Price: Low to high"
        }
      ],
      "default": "created_at"
    },
    {
      "type": "collection",
      "id": "collection_handle",
      "label": "Collection (leave empty for all products)"
    },
    {
      "type": "header",
      "content": "Style Settings"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#48713e"
    },
    {
      "type": "range",
      "id": "heading_size",
      "label": "Heading size",
      "min": 24,
      "max": 48,
      "step": 2,
      "unit": "px",
      "default": 32
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Accent color",
      "default": "#007bff"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#fecc35"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#48713e"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#0056b3"
    },
    {
      "type": "color",
      "id": "offer_color",
      "label": "Offer color",
      "default": "#48713e"
    },
    {
      "type": "header",
      "content": "Spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Top padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 60
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Bottom padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 60
    }
  ],
  "presets": [
    {
      "name": "Product Slider"
    }
  ]
}
{% endschema %}